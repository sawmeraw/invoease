// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace invoease.Migrations
{
    [DbContext(typeof(InvoeaseDbContext))]
    partial class InvoeaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminEmail = "clientA.admin@example.com",
                            ContactPersonName = "John Doe",
                            Name = "Client A",
                            PhoneNumber = "0456789012",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminEmail = "clientB.admin@example.com",
                            ContactPersonName = "Jane Smith",
                            Name = "Client B",
                            PhoneNumber = "0467890123",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdminEmail = "clientC.admin@example.com",
                            ContactPersonName = "Alice Green",
                            Name = "Client C",
                            PhoneNumber = "0478901234",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AdminEmail = "clientD.admin@example.com",
                            ContactPersonName = "Michael Blue",
                            Name = "Client D",
                            PhoneNumber = "0489012345",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdminEmail = "clientE.admin@example.com",
                            ContactPersonName = "Eve Red",
                            Name = "Client E",
                            PhoneNumber = "0490123456",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("EmailDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ScheduledSendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalExcGST")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalIncGST")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Invoice for client A",
                            DueDate = new DateOnly(2023, 1, 31),
                            InvoiceNumber = "INV001",
                            IsDraft = false,
                            IsPaid = false,
                            IsRecurring = false,
                            IsScheduled = false,
                            IssueDate = new DateOnly(2023, 1, 1),
                            Sent = true,
                            TotalExcGST = 1000.00m,
                            TotalIncGST = 1100.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Invoice for client B",
                            DueDate = new DateOnly(2023, 1, 31),
                            InvoiceNumber = "INV002",
                            IsDraft = false,
                            IsPaid = false,
                            IsRecurring = false,
                            IsScheduled = false,
                            IssueDate = new DateOnly(2023, 1, 1),
                            Sent = true,
                            TotalExcGST = 2000.00m,
                            TotalIncGST = 2200.00m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Invoice for client C",
                            DueDate = new DateOnly(2023, 1, 31),
                            InvoiceNumber = "INV003",
                            IsDraft = false,
                            IsPaid = false,
                            IsRecurring = false,
                            IsScheduled = false,
                            IssueDate = new DateOnly(2023, 1, 1),
                            Sent = true,
                            TotalExcGST = 3000.00m,
                            TotalIncGST = 3300.00m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Invoice for client D",
                            DueDate = new DateOnly(2023, 1, 31),
                            InvoiceNumber = "INV004",
                            IsDraft = false,
                            IsPaid = false,
                            IsRecurring = false,
                            IsScheduled = false,
                            IssueDate = new DateOnly(2023, 1, 1),
                            Sent = true,
                            TotalExcGST = 4000.00m,
                            TotalIncGST = 4400.00m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Invoice for client E",
                            DueDate = new DateOnly(2023, 1, 31),
                            InvoiceNumber = "INV005",
                            IsDraft = false,
                            IsPaid = false,
                            IsRecurring = false,
                            IsScheduled = false,
                            IssueDate = new DateOnly(2023, 1, 1),
                            Sent = true,
                            TotalExcGST = 5000.00m,
                            TotalIncGST = 5500.00m,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMiscellaneous")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ItemTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("WorkDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Item 1 for Invoice 1",
                            InvoiceId = 1,
                            ItemPrice = 100.00m,
                            ItemTotal = 100.00m,
                            Quantity = 1,
                            WorkDays = "[]"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Item 1 for Invoice 2",
                            InvoiceId = 2,
                            ItemPrice = 200.00m,
                            ItemTotal = 200.00m,
                            Quantity = 1,
                            WorkDays = "[]"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Item 1 for Invoice 3",
                            InvoiceId = 3,
                            ItemPrice = 300.00m,
                            ItemTotal = 300.00m,
                            Quantity = 1,
                            WorkDays = "[]"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Item 1 for Invoice 4",
                            InvoiceId = 4,
                            ItemPrice = 400.00m,
                            ItemTotal = 400.00m,
                            Quantity = 1,
                            WorkDays = "[]"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Item 1 for Invoice 5",
                            InvoiceId = 5,
                            ItemPrice = 500.00m,
                            ItemTotal = 500.00m,
                            Quantity = 1,
                            WorkDays = "[]"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ABN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOnInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ABN = "12345678901",
                            Email = "alice.johnson@example.com",
                            IsDeleted = false,
                            Name = "Alice Johnson",
                            NameOnInvoice = "A. Johnson",
                            PhoneNumber = "0412345678"
                        },
                        new
                        {
                            Id = 2,
                            ABN = "98765432109",
                            Email = "bob.smith@example.com",
                            IsDeleted = false,
                            Name = "Bob Smith",
                            NameOnInvoice = "B. Smith",
                            PhoneNumber = "0498765432"
                        },
                        new
                        {
                            Id = 3,
                            ABN = "19283746509",
                            Email = "charlie.brown@example.com",
                            IsDeleted = false,
                            Name = "Charlie Brown",
                            NameOnInvoice = "C. Brown",
                            PhoneNumber = "0423456789"
                        },
                        new
                        {
                            Id = 4,
                            ABN = "10293847567",
                            Email = "david.wilson@example.com",
                            IsDeleted = false,
                            Name = "David Wilson",
                            NameOnInvoice = "D. Wilson",
                            PhoneNumber = "0434567890"
                        },
                        new
                        {
                            Id = 5,
                            ABN = "56473829102",
                            Email = "eve.white@example.com",
                            IsDeleted = false,
                            Name = "Eve White",
                            NameOnInvoice = "E. White",
                            PhoneNumber = "0445678901"
                        });
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.HasOne("Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
